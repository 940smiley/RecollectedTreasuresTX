// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enum definitions for better type safety
enum ProductStatus {
  DRAFT
  PUBLISHED
  SOLD
  ARCHIVED
}

enum ProductCondition {
  NEW
  LIKE_NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
  UNKNOWN
}

enum UploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  PROCESS
  LOGIN
  LOGOUT
  UPLOAD
  DOWNLOAD
  GENERATE
  AUTHENTICATE
}

// New model for activity tracking
model ActivityLog {
  id          String   @id @default(cuid())
  action      String   // CREATE, UPDATE, DELETE, VIEW, PROCESS, LOGIN, etc.
  entityType  String   // Product, Category, Batch, User, etc.
  entityId    String?  // ID of the entity being acted upon
  details     String?  // Additional details about the activity (stored as JSON string)
  ipAddress   String?
  userAgent   String?
  
  // Relations to specific entities (optional)
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  
  batchId     String?
  batch       UploadBatch? @relation(fields: [batchId], references: [id])
  
  // User info (even if we don't have a full User model yet)
  userId      String?
  userEmail   String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Indexes for common queries
  @@index([action])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@index([userId])
  @@map("activity_logs")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  
  // Hierarchy
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // Relations
  products    Product[]
  
  // Timestamps and soft delete
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Add indexes for performance
  @@index([parentId])
  @@index([isActive])
  @@map("categories")
}

model Product {
  id                String   @id @default(cuid())
  title             String
  slug              String?  @unique
  description       String?
  aiGeneratedDesc   String?
  condition         String   @default("UNKNOWN")
  price             Float?
  originalPrice     Float?
  year              Int?
  manufacturer      String?
  series            String?
  edition           String?
  rarity            String?
  isAuthenticated   Boolean  @default(false)
  authenticationNotes String?
  weight            Float?
  dimensions        String?
  sku               String?  @unique
  barcode           String?
  stockQuantity     Int      @default(1)
  
  // Store tags as JSON string for SQLite compatibility
  tags              String   @default("[]")
  
  // Relations
  categoryId        String
  category          Category @relation(fields: [categoryId], references: [id])
  images            ProductImage[]
  activities        ActivityLog[]
  
  // Product status
  status            String   @default("DRAFT") // DRAFT, PUBLISHED, SOLD, ARCHIVED
  featured          Boolean  @default(false)
  
  // Audit and timestamps
  viewCount         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // Source tracking
  uploadBatchItemId String? @unique
  batchItem         UploadBatchItem? @relation(fields: [uploadBatchItemId], references: [id])

  // Indexes for common queries
  @@index([categoryId])
  @@index([status, featured])
  @@index([manufacturer])
  @@index([deletedAt])
  @@index([title])
  @@index([description])
  @@map("products")
}

model ProductImage {
  id          String   @id @default(cuid())
  url         String
  originalUrl String?
  filename    String
  size        Int?
  width       Int?
  height      Int?
  mimeType    String?
  isPrimary   Boolean  @default(false)
  isProcessed Boolean  @default(false)
  processingStatus String? // For tracking AI processing status
  altText     String?
  
  // Relations
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // Indexes for frequent queries
  @@index([productId, isPrimary])
  @@index([isProcessed])
  @@map("product_images")
}

model UploadBatch {
  id            String      @id @default(cuid())
  name          String?
  description   String?
  status        String      @default("PROCESSING") // PROCESSING, COMPLETED, FAILED, CANCELLED
  totalFiles    Int         @default(0)
  processedFiles Int        @default(0)
  successFiles  Int         @default(0)
  failedFiles   Int         @default(0)
  
  // Optional user info
  userId        String?
  userEmail     String?
  
  // Relations
  items         UploadBatchItem[]
  activities    ActivityLog[]
  
  // Processing info
  startedAt     DateTime?
  completedAt   DateTime?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Indexes
  @@index([status])
  @@index([createdAt])
  @@map("upload_batches")
}

model UploadBatchItem {
  id              String   @id @default(cuid())
  filename        String
  originalPath    String
  url             String?
  mimeType        String?
  size            Int?
  status          String   @default("PENDING") // PENDING, PROCESSING, SUCCESS, FAILED
  errorMessage    String?
  
  // AI processing data
  detectedCategory String?
  detectedTags    String   @default("[]") // Store as JSON string for SQLite
  aiAnalysis      String?  // Store AI analysis as JSON string
  confidenceScore Float?   // AI confidence score
  
  // Relations
  batchId         String
  batch           UploadBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  product         Product?    // Relation to the product created from this upload
  stagingItems    StagingItem[]
  
  // Processing info
  processingStartedAt DateTime?
  processingCompletedAt DateTime?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Indexes
  @@index([batchId, status])
  @@index([detectedCategory])
  @@map("upload_batch_items")
}

model StagingItem {
  id                    String   @id @default(cuid())
  uploadBatchItemId     String
  uploadBatchItem       UploadBatchItem @relation(fields: [uploadBatchItemId], references: [id])
  originalUrl           String
  backgroundRemovedUrl  String?
  enhancedPhotoUrl      String?
  suggestedCategory     String?
  aiGeneratedDescription String?
  status               String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([status])
  @@index([uploadBatchItemId])
  @@map("staging_items")
}
